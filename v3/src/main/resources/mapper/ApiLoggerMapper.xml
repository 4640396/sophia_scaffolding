<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.scaffolding.sophia.admin.biz.mapper.ApiLoggerMapper">
  <resultMap id="BaseResultMap" type="com.scaffolding.sophia.admin.api.entity.bo.ApiLogger">
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="URI" jdbcType="VARCHAR" property="uri" />
    <result column="METHOD_NAME" jdbcType="VARCHAR" property="methodName" />
    <result column="CLASS_NAME" jdbcType="VARCHAR" property="className" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="USER_ID" jdbcType="VARCHAR" property="userId" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="PARAMS" jdbcType="VARCHAR" property="params" />
    <result column="IP" jdbcType="VARCHAR" property="ip" />
    <result column="METHOD" jdbcType="VARCHAR" property="method" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, URI, METHOD_NAME, CLASS_NAME, CREATE_TIME, USER_ID, USER_NAME, PARAMS, IP, METHOD
  </sql>
  <select id="selectByExample" parameterType="com.scaffolding.sophia.admin.api.entity.bo.ApiLoggerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_api_logger
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_api_logger
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from sys_api_logger
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.scaffolding.sophia.admin.api.entity.bo.ApiLoggerExample">
    delete from sys_api_logger
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.scaffolding.sophia.admin.api.entity.bo.ApiLogger">
    insert into sys_api_logger (ID, URI, METHOD_NAME, 
      CLASS_NAME, CREATE_TIME, USER_ID, 
      USER_NAME, PARAMS, IP, 
      METHOD)
    values (#{id,jdbcType=VARCHAR}, #{uri,jdbcType=VARCHAR}, #{methodName,jdbcType=VARCHAR}, 
      #{className,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{userId,jdbcType=VARCHAR}, 
      #{userName,jdbcType=VARCHAR}, #{params,jdbcType=VARCHAR}, #{ip,jdbcType=VARCHAR}, 
      #{method,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.scaffolding.sophia.admin.api.entity.bo.ApiLogger">
    insert into sys_api_logger
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="uri != null">
        URI,
      </if>
      <if test="methodName != null">
        METHOD_NAME,
      </if>
      <if test="className != null">
        CLASS_NAME,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="userName != null">
        USER_NAME,
      </if>
      <if test="params != null">
        PARAMS,
      </if>
      <if test="ip != null">
        IP,
      </if>
      <if test="method != null">
        METHOD,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="uri != null">
        #{uri,jdbcType=VARCHAR},
      </if>
      <if test="methodName != null">
        #{methodName,jdbcType=VARCHAR},
      </if>
      <if test="className != null">
        #{className,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        #{params,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        #{method,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.scaffolding.sophia.admin.api.entity.bo.ApiLoggerExample" resultType="java.lang.Long">
    select count(*) from sys_api_logger
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sys_api_logger
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.uri != null">
        URI = #{record.uri,jdbcType=VARCHAR},
      </if>
      <if test="record.methodName != null">
        METHOD_NAME = #{record.methodName,jdbcType=VARCHAR},
      </if>
      <if test="record.className != null">
        CLASS_NAME = #{record.className,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.userName != null">
        USER_NAME = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.params != null">
        PARAMS = #{record.params,jdbcType=VARCHAR},
      </if>
      <if test="record.ip != null">
        IP = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.method != null">
        METHOD = #{record.method,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sys_api_logger
    set ID = #{record.id,jdbcType=VARCHAR},
      URI = #{record.uri,jdbcType=VARCHAR},
      METHOD_NAME = #{record.methodName,jdbcType=VARCHAR},
      CLASS_NAME = #{record.className,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      USER_ID = #{record.userId,jdbcType=VARCHAR},
      USER_NAME = #{record.userName,jdbcType=VARCHAR},
      PARAMS = #{record.params,jdbcType=VARCHAR},
      IP = #{record.ip,jdbcType=VARCHAR},
      METHOD = #{record.method,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.scaffolding.sophia.admin.api.entity.bo.ApiLogger">
    update sys_api_logger
    <set>
      <if test="uri != null">
        URI = #{uri,jdbcType=VARCHAR},
      </if>
      <if test="methodName != null">
        METHOD_NAME = #{methodName,jdbcType=VARCHAR},
      </if>
      <if test="className != null">
        CLASS_NAME = #{className,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        PARAMS = #{params,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        IP = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        METHOD = #{method,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.scaffolding.sophia.admin.api.entity.bo.ApiLogger">
    update sys_api_logger
    set URI = #{uri,jdbcType=VARCHAR},
      METHOD_NAME = #{methodName,jdbcType=VARCHAR},
      CLASS_NAME = #{className,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      USER_ID = #{userId,jdbcType=VARCHAR},
      USER_NAME = #{userName,jdbcType=VARCHAR},
      PARAMS = #{params,jdbcType=VARCHAR},
      IP = #{ip,jdbcType=VARCHAR},
      METHOD = #{method,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
</mapper>